/* ========================================================================
 * Copyright 2014 G3xtreme
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G3xtreme

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.G3xtreme.foro.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.G3xtreme.foro.logic.dto.ForoDTO;
import co.edu.uniandes.csw.G3xtreme.foro.logic.api.IForoLogicService;
import co.edu.uniandes.csw.G3xtreme.foro.master.logic.api._IForoMasterLogicService;
import co.edu.uniandes.csw.G3xtreme.foro.master.logic.dto.ForoMasterDTO;
import co.edu.uniandes.csw.G3xtreme.actividad.logic.api.IActividadLogicService;
import co.edu.uniandes.csw.G3xtreme.fase.logic.api.IFaseLogicService;
import co.edu.uniandes.csw.G3xtreme.actividad.logic.dto.ActividadDTO;
import co.edu.uniandes.csw.G3xtreme.fase.logic.dto.FaseDTO;
import javax.inject.Inject;


public abstract class _ForoMasterMockLogicService implements _IForoMasterLogicService {

    protected static ArrayList<ForoMasterDTO> foroMasterDtosList = new ArrayList<ForoMasterDTO>() ;
    @Inject
    protected IActividadLogicService actividadPersistance;
    @Inject
    protected IFaseLogicService fasePersistance;
    @Inject
    protected IForoLogicService foroPersistance;

    public ForoMasterDTO createMasterForo(ForoMasterDTO foro) {

        foroPersistance.createForo(foro.getForoEntity());
        for (FaseDTO dto : foro.getCreatefase_foro()) {
            foro.getListfase_foro().add(fasePersistance.createFase(dto));
        }
        for (ActividadDTO dto : foro.getCreateactividad()) {
            foro.getListactividad().add(actividadPersistance.createActividad(dto));
        }
        foroMasterDtosList.add(foro);
        return foro;
    }

    public ForoMasterDTO getMasterForo(Long id) {
        for (ForoMasterDTO foroMasterDTO : foroMasterDtosList) {
            if (foroMasterDTO.getForoEntity().getId() == id) {
                return foroMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterForo(Long id) {
        for (ForoMasterDTO foroMasterDTO : foroMasterDtosList) {
            if (foroMasterDTO.getForoEntity().getId() == id) {

                for (FaseDTO dto : foroMasterDTO.getCreatefase_foro()) {
                    fasePersistance.deleteFase(dto.getId());
                }
                foroPersistance.deleteForo(foroMasterDTO.getId());
                foroMasterDtosList.remove(foroMasterDTO);
                for (ActividadDTO dto : foroMasterDTO.getCreateactividad()) {
                    actividadPersistance.deleteActividad(dto.getId());
                }
                foroPersistance.deleteForo(foroMasterDTO.getId());
                foroMasterDtosList.remove(foroMasterDTO);
            }
        }

    }

    public void updateMasterForo(ForoMasterDTO foro) {

		ForoMasterDTO currentForo = getMasterForo(foro.getForoEntity().getId());
		if (currentForo == null) {
			currentForo = foro;
		}else{
			foroMasterDtosList.remove(currentForo);
		}

        // update Fase
        if (foro.getUpdatefase_foro() != null) {
            for (FaseDTO dto : foro.getUpdatefase_foro()) {
                fasePersistance.updateFase(dto);
                for (FaseDTO fasedto : currentForo.getListfase_foro()) {
					if (fasedto.getId() == dto.getId()) {
						currentForo.getListfase_foro().remove(fasedto);
						currentForo.getListfase_foro().add(dto);
					}
				}
            }
        }
        // persist new Fase
        if (foro.getCreatefase_foro() != null) {
            for (FaseDTO dto : foro.getCreatefase_foro()) {
                FaseDTO persistedFaseDTO = fasePersistance.createFase(dto);
                dto = persistedFaseDTO;
                currentForo.getListfase_foro().add(dto);
            }
        }
        // delete Fase
        if (foro.getDeletefase_foro() != null) {
            for (FaseDTO dto : foro.getDeletefase_foro()) {
				for (FaseDTO fasedto : currentForo.getListfase_foro()) {
					if (fasedto.getId() == dto.getId()) {
						currentForo.getListfase_foro().remove(fasedto);
					}
				}
                fasePersistance.deleteFase(dto.getId());
            }
        }
        // update Actividad
        if (foro.getUpdateactividad() != null) {
            for (ActividadDTO dto : foro.getUpdateactividad()) {
                actividadPersistance.updateActividad(dto);
                for (ActividadDTO actividaddto : currentForo.getListactividad()) {
					if (actividaddto.getId() == dto.getId()) {
						currentForo.getListactividad().remove(actividaddto);
						currentForo.getListactividad().add(dto);
					}
				}
            }
        }
        // persist new Actividad
        if (foro.getCreateactividad() != null) {
            for (ActividadDTO dto : foro.getCreateactividad()) {
                ActividadDTO persistedActividadDTO = actividadPersistance.createActividad(dto);
                dto = persistedActividadDTO;
                currentForo.getListactividad().add(dto);
            }
        }
        // delete Actividad
        if (foro.getDeleteactividad() != null) {
            for (ActividadDTO dto : foro.getDeleteactividad()) {
				for (ActividadDTO actividaddto : currentForo.getListactividad()) {
					if (actividaddto.getId() == dto.getId()) {
						currentForo.getListactividad().remove(actividaddto);
					}
				}
                actividadPersistance.deleteActividad(dto.getId());
            }
        }
        foroMasterDtosList.add(currentForo);
    }
}