/* ========================================================================
 * Copyright 2014 G3xtreme
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G3xtreme

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.G3xtreme.actividad.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.G3xtreme.actividad.logic.dto.ActividadPageDTO;
import co.edu.uniandes.csw.G3xtreme.actividad.logic.dto.ActividadDTO;
import co.edu.uniandes.csw.G3xtreme.actividad.logic.api.IActividadLogicService;
import co.edu.uniandes.csw.G3xtreme.actividad.persistence.ActividadPersistence;
import co.edu.uniandes.csw.G3xtreme.actividad.persistence.api.IActividadPersistence;
import co.edu.uniandes.csw.G3xtreme.actividad.persistence.entity.ActividadEntity;
import co.edu.uniandes.csw.G3xtreme.actividad.persistence.converter.ActividadConverter;
import static co.edu.uniandes.csw.G3xtreme.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ActividadLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ActividadLogicService.class.getPackage())
				.addPackage(IActividadLogicService.class.getPackage())
				.addPackage(ActividadPersistence.class.getPackage())
				.addPackage(ActividadEntity.class.getPackage())
				.addPackage(IActividadPersistence.class.getPackage())
                .addPackage(ActividadDTO.class.getPackage())
                .addPackage(ActividadConverter.class.getPackage())
                .addPackage(ActividadEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IActividadLogicService actividadLogicService;
	
	@Inject
	private IActividadPersistence actividadPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ActividadDTO> dtos=actividadPersistence.getActividads();
		for(ActividadDTO dto:dtos){
			actividadPersistence.deleteActividad(dto.getId());
		}
	}

	private List<ActividadDTO> data=new ArrayList<ActividadDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ActividadDTO pdto=new ActividadDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setDescripcion(generateRandom(String.class));
			pdto.setCosto(generateRandom(Long.class));
			pdto.setFecha(generateRandomDate());
			pdto.setHora(generateRandom(String.class));
			pdto.setLugar_actividadId(generateRandom(Long.class));
			pdto.setExpositor_actividadId(generateRandom(Long.class));
			pdto=actividadPersistence.createActividad(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createActividadTest(){
		ActividadDTO ldto=new ActividadDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setCosto(generateRandom(Long.class));
		ldto.setFecha(generateRandomDate());
		ldto.setHora(generateRandom(String.class));
		ldto.setLugar_actividadId(generateRandom(Long.class));
		ldto.setExpositor_actividadId(generateRandom(Long.class));
		
		
		ActividadDTO result=actividadLogicService.createActividad(ldto);
		
		Assert.assertNotNull(result);
		
		ActividadDTO pdto=actividadPersistence.getActividad(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getDescripcion(), pdto.getDescripcion());	
		Assert.assertEquals(ldto.getCosto(), pdto.getCosto());	
		Assert.assertEquals(ldto.getFecha(), pdto.getFecha());	
		Assert.assertEquals(ldto.getHora(), pdto.getHora());	
		Assert.assertEquals(ldto.getLugar_actividadId(), pdto.getLugar_actividadId());	
		Assert.assertEquals(ldto.getExpositor_actividadId(), pdto.getExpositor_actividadId());	
	}
	
	@Test
	public void getActividadsTest(){
		List<ActividadDTO> list=actividadLogicService.getActividads();
		Assert.assertEquals(list.size(), data.size());
        for(ActividadDTO ldto:list){
        	boolean found=false;
            for(ActividadDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getActividadTest(){
		ActividadDTO pdto=data.get(0);
		ActividadDTO ldto=actividadLogicService.getActividad(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getDescripcion(), ldto.getDescripcion());
		Assert.assertEquals(pdto.getCosto(), ldto.getCosto());
		Assert.assertEquals(pdto.getFecha(), ldto.getFecha());
		Assert.assertEquals(pdto.getHora(), ldto.getHora());
		Assert.assertEquals(pdto.getLugar_actividadId(), ldto.getLugar_actividadId());
		Assert.assertEquals(pdto.getExpositor_actividadId(), ldto.getExpositor_actividadId());
        
	}
	
	@Test
	public void deleteActividadTest(){
		ActividadDTO pdto=data.get(0);
		actividadLogicService.deleteActividad(pdto.getId());
        ActividadDTO deleted=actividadPersistence.getActividad(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateActividadTest(){
		ActividadDTO pdto=data.get(0);
		
		ActividadDTO ldto=new ActividadDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setCosto(generateRandom(Long.class));
		ldto.setFecha(generateRandomDate());
		ldto.setHora(generateRandom(String.class));
		ldto.setLugar_actividadId(generateRandom(Long.class));
		ldto.setExpositor_actividadId(generateRandom(Long.class));
		
		
		actividadLogicService.updateActividad(ldto);
		
		
		ActividadDTO resp=actividadPersistence.getActividad(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(ldto.getCosto(), resp.getCosto());	
		Assert.assertEquals(ldto.getFecha(), resp.getFecha());	
		Assert.assertEquals(ldto.getHora(), resp.getHora());	
		Assert.assertEquals(ldto.getLugar_actividadId(), resp.getLugar_actividadId());	
		Assert.assertEquals(ldto.getExpositor_actividadId(), resp.getExpositor_actividadId());	
	}
	
	@Test
	public void getActividadPaginationTest(){
		
		ActividadPageDTO dto1=actividadLogicService.getActividads(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ActividadPageDTO dto2=actividadLogicService.getActividads(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ActividadDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ActividadDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ActividadDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ActividadDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ActividadPageDTO dto3=actividadLogicService.getActividads(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ActividadDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ActividadDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}