/* ========================================================================
 * Copyright 2014 G3xtreme
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G3xtreme

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.G3xtreme.fase.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.G3xtreme.fase.logic.dto.FasePageDTO;
import co.edu.uniandes.csw.G3xtreme.fase.logic.dto.FaseDTO;
import co.edu.uniandes.csw.G3xtreme.fase.logic.api.IFaseLogicService;
import co.edu.uniandes.csw.G3xtreme.fase.persistence.FasePersistence;
import co.edu.uniandes.csw.G3xtreme.fase.persistence.api.IFasePersistence;
import co.edu.uniandes.csw.G3xtreme.fase.persistence.entity.FaseEntity;
import co.edu.uniandes.csw.G3xtreme.fase.persistence.converter.FaseConverter;
import static co.edu.uniandes.csw.G3xtreme.util._TestUtil.*;

@RunWith(Arquillian.class)
public class FaseLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(FaseLogicService.class.getPackage())
				.addPackage(IFaseLogicService.class.getPackage())
				.addPackage(FasePersistence.class.getPackage())
				.addPackage(FaseEntity.class.getPackage())
				.addPackage(IFasePersistence.class.getPackage())
                .addPackage(FaseDTO.class.getPackage())
                .addPackage(FaseConverter.class.getPackage())
                .addPackage(FaseEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IFaseLogicService faseLogicService;
	
	@Inject
	private IFasePersistence fasePersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<FaseDTO> dtos=fasePersistence.getFases();
		for(FaseDTO dto:dtos){
			fasePersistence.deleteFase(dto.getId());
		}
	}

	private List<FaseDTO> data=new ArrayList<FaseDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			FaseDTO pdto=new FaseDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setEstado(generateRandom(Integer.class));
			pdto.setFechaInicio(generateRandomDate());
			pdto.setFechaFin(generateRandomDate());
			pdto=fasePersistence.createFase(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createFaseTest(){
		FaseDTO ldto=new FaseDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setEstado(generateRandom(Integer.class));
		ldto.setFechaInicio(generateRandomDate());
		ldto.setFechaFin(generateRandomDate());
		
		
		FaseDTO result=faseLogicService.createFase(ldto);
		
		Assert.assertNotNull(result);
		
		FaseDTO pdto=fasePersistence.getFase(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getEstado(), pdto.getEstado());	
		Assert.assertEquals(ldto.getFechaInicio(), pdto.getFechaInicio());	
		Assert.assertEquals(ldto.getFechaFin(), pdto.getFechaFin());	
	}
	
	@Test
	public void getFasesTest(){
		List<FaseDTO> list=faseLogicService.getFases();
		Assert.assertEquals(list.size(), data.size());
        for(FaseDTO ldto:list){
        	boolean found=false;
            for(FaseDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getFaseTest(){
		FaseDTO pdto=data.get(0);
		FaseDTO ldto=faseLogicService.getFase(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getEstado(), ldto.getEstado());
		Assert.assertEquals(pdto.getFechaInicio(), ldto.getFechaInicio());
		Assert.assertEquals(pdto.getFechaFin(), ldto.getFechaFin());
        
	}
	
	@Test
	public void deleteFaseTest(){
		FaseDTO pdto=data.get(0);
		faseLogicService.deleteFase(pdto.getId());
        FaseDTO deleted=fasePersistence.getFase(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateFaseTest(){
		FaseDTO pdto=data.get(0);
		
		FaseDTO ldto=new FaseDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setEstado(generateRandom(Integer.class));
		ldto.setFechaInicio(generateRandomDate());
		ldto.setFechaFin(generateRandomDate());
		
		
		faseLogicService.updateFase(ldto);
		
		
		FaseDTO resp=fasePersistence.getFase(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getEstado(), resp.getEstado());	
		Assert.assertEquals(ldto.getFechaInicio(), resp.getFechaInicio());	
		Assert.assertEquals(ldto.getFechaFin(), resp.getFechaFin());	
	}
	
	@Test
	public void getFasePaginationTest(){
		
		FasePageDTO dto1=faseLogicService.getFases(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		FasePageDTO dto2=faseLogicService.getFases(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(FaseDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(FaseDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(FaseDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(FaseDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        FasePageDTO dto3=faseLogicService.getFases(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(FaseDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(FaseDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}