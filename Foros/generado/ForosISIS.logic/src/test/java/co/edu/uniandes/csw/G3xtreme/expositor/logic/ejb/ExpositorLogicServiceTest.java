/* ========================================================================
 * Copyright 2014 G3xtreme
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G3xtreme

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.G3xtreme.expositor.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.G3xtreme.expositor.logic.dto.ExpositorPageDTO;
import co.edu.uniandes.csw.G3xtreme.expositor.logic.dto.ExpositorDTO;
import co.edu.uniandes.csw.G3xtreme.expositor.logic.api.IExpositorLogicService;
import co.edu.uniandes.csw.G3xtreme.expositor.persistence.ExpositorPersistence;
import co.edu.uniandes.csw.G3xtreme.expositor.persistence.api.IExpositorPersistence;
import co.edu.uniandes.csw.G3xtreme.expositor.persistence.entity.ExpositorEntity;
import co.edu.uniandes.csw.G3xtreme.expositor.persistence.converter.ExpositorConverter;
import static co.edu.uniandes.csw.G3xtreme.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ExpositorLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ExpositorLogicService.class.getPackage())
				.addPackage(IExpositorLogicService.class.getPackage())
				.addPackage(ExpositorPersistence.class.getPackage())
				.addPackage(ExpositorEntity.class.getPackage())
				.addPackage(IExpositorPersistence.class.getPackage())
                .addPackage(ExpositorDTO.class.getPackage())
                .addPackage(ExpositorConverter.class.getPackage())
                .addPackage(ExpositorEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IExpositorLogicService expositorLogicService;
	
	@Inject
	private IExpositorPersistence expositorPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ExpositorDTO> dtos=expositorPersistence.getExpositors();
		for(ExpositorDTO dto:dtos){
			expositorPersistence.deleteExpositor(dto.getId());
		}
	}

	private List<ExpositorDTO> data=new ArrayList<ExpositorDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ExpositorDTO pdto=new ExpositorDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setCosto(generateRandom(Long.class));
			pdto=expositorPersistence.createExpositor(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createExpositorTest(){
		ExpositorDTO ldto=new ExpositorDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setCosto(generateRandom(Long.class));
		
		
		ExpositorDTO result=expositorLogicService.createExpositor(ldto);
		
		Assert.assertNotNull(result);
		
		ExpositorDTO pdto=expositorPersistence.getExpositor(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getCosto(), pdto.getCosto());	
	}
	
	@Test
	public void getExpositorsTest(){
		List<ExpositorDTO> list=expositorLogicService.getExpositors();
		Assert.assertEquals(list.size(), data.size());
        for(ExpositorDTO ldto:list){
        	boolean found=false;
            for(ExpositorDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getExpositorTest(){
		ExpositorDTO pdto=data.get(0);
		ExpositorDTO ldto=expositorLogicService.getExpositor(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getCosto(), ldto.getCosto());
        
	}
	
	@Test
	public void deleteExpositorTest(){
		ExpositorDTO pdto=data.get(0);
		expositorLogicService.deleteExpositor(pdto.getId());
        ExpositorDTO deleted=expositorPersistence.getExpositor(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateExpositorTest(){
		ExpositorDTO pdto=data.get(0);
		
		ExpositorDTO ldto=new ExpositorDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setCosto(generateRandom(Long.class));
		
		
		expositorLogicService.updateExpositor(ldto);
		
		
		ExpositorDTO resp=expositorPersistence.getExpositor(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getCosto(), resp.getCosto());	
	}
	
	@Test
	public void getExpositorPaginationTest(){
		
		ExpositorPageDTO dto1=expositorLogicService.getExpositors(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ExpositorPageDTO dto2=expositorLogicService.getExpositors(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ExpositorDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ExpositorDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ExpositorDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ExpositorDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ExpositorPageDTO dto3=expositorLogicService.getExpositors(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ExpositorDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ExpositorDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}