/* ========================================================================
 * Copyright 2014 G3xtreme
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G3xtreme

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.G3xtreme.dia.master.logic.ejb;

import co.edu.uniandes.csw.G3xtreme.actividad.logic.dto.ActividadDTO;
import co.edu.uniandes.csw.G3xtreme.actividad.persistence.api.IActividadPersistence;
import co.edu.uniandes.csw.G3xtreme.dia.logic.dto.DiaDTO;
import co.edu.uniandes.csw.G3xtreme.dia.master.logic.api._IDiaMasterLogicService;
import co.edu.uniandes.csw.G3xtreme.dia.master.logic.dto.DiaMasterDTO;
import co.edu.uniandes.csw.G3xtreme.dia.master.persistence.api.IDiaMasterPersistence;
import co.edu.uniandes.csw.G3xtreme.dia.master.persistence.entity.Diaactividad_diaEntity;
import co.edu.uniandes.csw.G3xtreme.dia.persistence.api.IDiaPersistence;
import javax.inject.Inject;

public abstract class _DiaMasterLogicService implements _IDiaMasterLogicService {

    @Inject
    protected IDiaPersistence diaPersistance;
    @Inject
    protected IDiaMasterPersistence diaMasterPersistance;
    @Inject
    protected IActividadPersistence actividadPersistance;

    public DiaMasterDTO createMasterDia(DiaMasterDTO dia) {
        DiaDTO persistedDiaDTO = diaPersistance.createDia(dia.getDiaEntity());
        if (dia.getCreateactividad_dia() != null) {
            for (ActividadDTO actividadDTO : dia.getCreateactividad_dia()) {
                ActividadDTO createdActividadDTO = actividadPersistance.createActividad(actividadDTO);
                Diaactividad_diaEntity diaActividadEntity = new Diaactividad_diaEntity(persistedDiaDTO.getId(), createdActividadDTO.getId());
                diaMasterPersistance.createDiaactividad_diaEntity(diaActividadEntity);
            }
        }
        // update actividad
        if (dia.getUpdateactividad_dia() != null) {
            for (ActividadDTO actividadDTO : dia.getUpdateactividad_dia()) {
                actividadPersistance.updateActividad(actividadDTO);
                Diaactividad_diaEntity diaActividadEntity = new Diaactividad_diaEntity(persistedDiaDTO.getId(), actividadDTO.getId());
                diaMasterPersistance.createDiaactividad_diaEntity(diaActividadEntity);
            }
        }
        return dia;
    }

    public DiaMasterDTO getMasterDia(Long id) {
        return diaMasterPersistance.getDia(id);
    }

    public void deleteMasterDia(Long id) {
        diaPersistance.deleteDia(id);
    }

    public void updateMasterDia(DiaMasterDTO dia) {
        diaPersistance.updateDia(dia.getDiaEntity());

        //---- FOR RELATIONSHIP
        // persist new actividad
        if (dia.getCreateactividad_dia() != null) {
            for (ActividadDTO actividadDTO : dia.getCreateactividad_dia()) {
                ActividadDTO createdActividadDTO = actividadPersistance.createActividad(actividadDTO);
                Diaactividad_diaEntity diaActividadEntity = new Diaactividad_diaEntity(dia.getDiaEntity().getId(), createdActividadDTO.getId());
                diaMasterPersistance.createDiaactividad_diaEntity(diaActividadEntity);
            }
        }
        // update actividad
        if (dia.getUpdateactividad_dia() != null) {
            for (ActividadDTO actividadDTO : dia.getUpdateactividad_dia()) {
                actividadPersistance.updateActividad(actividadDTO);
            }
        }
        // delete actividad
        if (dia.getDeleteactividad_dia() != null) {
            for (ActividadDTO actividadDTO : dia.getDeleteactividad_dia()) {
                diaMasterPersistance.deleteDiaactividad_diaEntity(dia.getDiaEntity().getId(), actividadDTO.getId());
                actividadPersistance.deleteActividad(actividadDTO.getId());
            }
        }
    }
}
