/* ========================================================================
 * Copyright 2014 G3xtreme
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G3xtreme

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.G3xtreme.foro.master.persistence.entity;

import co.edu.uniandes.csw.G3xtreme.fase.persistence.entity.FaseEntity;
import co.edu.uniandes.csw.G3xtreme.foro.persistence.entity.ForoEntity;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrimaryKeyJoinColumn; 
import org.eclipse.persistence.annotations.JoinFetch;

@Entity
@IdClass(Forofase_foroEntityId.class)
@NamedQueries({
    @NamedQuery(name = "Forofase_foroEntity.getByMasterId", query = "SELECT  u FROM Forofase_foroEntity u WHERE u.foroId=:foroId"),
    @NamedQuery(name = "Forofase_foroEntity.deleteForofase_foroEntity", query = "DELETE FROM Forofase_foroEntity u WHERE u.foroId=:foroId and  u.fase_foroId=:fase_foroId")
})
public class Forofase_foroEntity implements Serializable {

    @Id
    @Column(name = "foroId")
    private Long foroId;
    @Id
    @Column(name = "fase_foroId")
    private Long fase_foroId;
    @ManyToOne
    @PrimaryKeyJoinColumn(name = "foroId", referencedColumnName = "id")
    @JoinFetch
    private FaseEntity foroIdEntity;
    @ManyToOne
    @PrimaryKeyJoinColumn(name = "fase_foroId", referencedColumnName = "id")
    @JoinFetch
    private FaseEntity fase_foroIdEntity; 

    public Forofase_foroEntity() {
    }

    public Forofase_foroEntity(Long foroId, Long fase_foroId) {
        this.foroId =foroId;
        this.fase_foroId = fase_foroId;
    }

    public Long getForoId() {
        return foroId;
    }

    public void setForoId(Long foroId) {
        this.foroId = foroId;
    }

    public Long getFase_foroId() {
        return fase_foroId;
    }

    public void setFase_foroId(Long fase_foroId) {
        this.fase_foroId = fase_foroId;
    }

    public FaseEntity getForoIdEntity() {
        return foroIdEntity;
    }

    public void setForoIdEntity(FaseEntity foroIdEntity) {
        this.foroIdEntity = foroIdEntity;
    }

    public FaseEntity getFase_foroIdEntity() {
        return fase_foroIdEntity;
    }

    public void setFase_foroIdEntity(FaseEntity fase_foroIdEntity) {
        this.fase_foroIdEntity = fase_foroIdEntity;
    }

}
